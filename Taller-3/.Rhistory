knitr::opts_chunk$set(echo = TRUE)
library(readxl)
columnas <- c("age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","num")
datos <- read.csv("processed.cleveland.data.txt", col.names = columnas)
datos$num <- ifelse(datos$num == 0, 0, 1)
# Convertir las columnas a numéricas
datos <- data.frame(apply(datos, 2, as.numeric))
# Imputar los valores perdidos con la mediana de cada columna
for (col in names(datos)) {
datos[, col][is.na(datos[, col])] <- median(datos[, col], na.rm = TRUE)
}
# Calcula el número de valores nulos en cada columna
nulos_por_columna <- colSums(is.na(datos))
# Imprime el número de valores nulos en cada columna
print(nulos_por_columna)
# Crear tablas de contingencia entre la variable respuesta (num) y cada variable categórica
tabla_cp <- table(datos$num, datos$cp)
tabla_sex <- table(datos$num, datos$sex)
tabla_cp <- table(datos$num, datos$cp)
tabla_sex <- table(datos$num, datos$sex)
tabla_fbs <- table(datos$num, datos$fbs)
tabla_restecg <- table(datos$num, datos$restecg)
tabla_slope <- table(datos$num, datos$slope)
# Agrega más tablas para otras variables categóricas si es necesario
# Muestra las tablas de contingencia
print("Tabla de contingencia para la variable 'cp':")
print(tabla_cp)
print("Tabla de contingencia para la variable 'sex':")
print(tabla_sex)
# Agrega más impresiones de tablas para otras variables categóricas si es necesario
barplot(tabla_cp, beside = TRUE, legend = TRUE, main = "Variable CP vs. Respuesta")
barplot(tabla_sex, beside = TRUE, legend = TRUE, main = "Variable Sex vs. Respuesta")
barplot(tabla_fbs, beside = TRUE, legend = TRUE, main = "Variable FBS vs. Respuesta")
barplot(tabla_restecg, beside = TRUE, legend = TRUE, main = "Variable Restecg vs. Respuesta")
barplot(tabla_slope, beside = TRUE, legend = TRUE, main = "Variable Slope vs. Respuesta")
tabla_contingencia <- table(datos$num, datos$fbs)
print("Tabla de Contingencia para la variable 'fbs':")
print(tabla_contingencia)
probabilidad_ataque_con_glucemia = (22/139)
probabilidad_no_ataque_con_glucemia = (117 / 139)
probabilidad_ataque_sin_glucemia = (22 / 163)
probabilidad_no_ataque_sin_glucemia = (141 / 163)
numerador = probabilidad_ataque_con_glucemia / probabilidad_no_ataque_con_glucemia
denominador =  probabilidad_ataque_sin_glucemia / probabilidad_no_ataque_sin_glucemia
log(probabilidad_ataque_con_glucemia) - log(probabilidad_ataque_sin_glucemia)
set.seed(1)
n_tot=302
rval_reprobado =runif(n_tot)
prop_reprobado =44/302
h0_reporbado = ifelse(rval_reprobado<prop_reprobado,"A.Ataque","B.No_ataque")
rval_asistencia =runif(n_tot)
prop_asistencia =139/302
h0_asistencia =ifelse(rval_asistencia <prop_reprobado,"A.Glucemia","B.Sin_glucemia")
h0_tablacont = table(h0_asistencia,h0_reporbado)
print(h0_tablacont)
h0_or = (h0_tablacont[1,1]/h0_tablacont[1,2])/(h0_tablacont[2,1]/h0_tablacont[2,2])
print(h0_or)
# Ajustar un modelo de regresión logística utilizando glm()
modelo_logistico <- glm(num ~ fbs, data = datos, family = binomial)
# Imprime el resumen del modelo
summary(modelo_logistico)$coefficients
# Ajustar un modelo de regresión logística con todas las variables
modelo_multivariado <- glm(num ~ ., data = datos, family = binomial)
# Imprimir el resumen del modelo
summary(modelo_multivariado)
# Calcular las probabilidades predichas bajo el modelo multivariado
datos$probabilidades <- predict(modelo_multivariado, type = "response")
# Visualizar las probabilidades predichas junto con la variable respuesta
library(ggplot2)
ggplot(datos, aes(x = num, y = probabilidades)) +
geom_point(aes(color = factor(num))) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(x = "Enfermedad cardíaca", y = "Probabilidad predicha") +
scale_color_discrete(name = "Enfermedad cardíaca") +
theme_minimal()
df <- read_excel("AAD-taller03.xlsx")
df
df <- read_excel("AAD-taller03.xlsx")
df
View(df)
